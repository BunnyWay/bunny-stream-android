x-generator: NSwag v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))
openapi: 3.0.0
info:
  title: Stream API
  termsOfService: https://bunny.net/tos
  contact:
    name: bunny.net
    url: https://docs.bunny.net
    email: support@bunny.net
  version: 1.0.0
  description: This API allows you to manage video collections and videos on the Bunny Stream platform. It supports operations such as retrieval, creation, updating, deletion, fetching, and transcoding of collections and videos. For further details, please refer to the external documentation.
servers:
  - url: https://video.bunnycdn.com/
paths:
  /library/{libraryId}/collections/{collectionId}:
    get:
      tags:
        - Manage Collections
      summary: Get Collection
      description: Retrieves details of a specific collection. Use the query parameter 'includeThumbnails' to include preview images if available.
      operationId: Collection_GetCollection
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library containing the collection.
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the collection.
        - name: includeThumbnails
          in: query
          schema:
            type: boolean
            default: false
          description: If true, the response will include preview image URLs for the collection.
      responses:
        '200':
          description: The details of the requested collection, including metadata and optional thumbnails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested collection was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
    post:
      tags:
        - Manage Collections
      summary: Update Collection
      description: Updates an existing collection. Provide the new collection details in the request body using the UpdateCollectionModel.
      operationId: Collection_UpdateCollection
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library containing the collection.
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the collection to be updated.
      requestBody:
        description: Collection model containing the fields to be updated.
        content:
          application/json:
            schema:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/UpdateCollectionModel'
        required: true
      responses:
        '200':
          description: The collection was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested collection was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
    delete:
      tags:
        - Manage Collections
      summary: Delete Collection
      description: Deletes the specified collection permanently from the video library.
      operationId: Collection_DeleteCollection
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library containing the collection.
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the collection to be deleted.
      responses:
        '200':
          description: The collection was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested collection was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/collections:
    get:
      tags:
        - Manage Collections
      summary: Get Collection List
      description: Retrieves a paginated list of collections for the specified video library. Optional query parameters allow for filtering, pagination, and ordering the results.
      operationId: Collection_List
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: page
          in: query
          schema:
            type: integer
            format: int32
            default: 1
          description: The page number to retrieve.
        - name: itemsPerPage
          in: query
          schema:
            type: integer
            format: int32
            default: 100
          description: The number of items per page.
        - name: search
          in: query
          schema:
            type: string
            default: ''
            nullable: true
          description: A search term to filter collections by name or other metadata.
        - name: orderBy
          in: query
          schema:
            type: string
            default: date
            nullable: true
          description: Specifies the field by which to order the results.
        - name: includeThumbnails
          in: query
          schema:
            type: boolean
            default: false
          description: If true, includes thumbnail image URLs in the response.
      responses:
        '200':
          description: A paginated list of collections matching the query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationListOfCollectionModel'
        '401':
          description: The request authorization failed.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
    post:
      tags:
        - Manage Collections
      summary: Create Collection
      description: Creates a new collection in the specified video library using the provided collection details.
      operationId: Collection_CreateCollection
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library where the new collection will be created.
      requestBody:
        description: Collection model containing the details for the new collection.
        content:
          application/json:
            schema:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/UpdateCollectionModel'
        required: true
      responses:
        '200':
          description: The collection was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModel'
        '401':
          description: The request authorization failed.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}:
    get:
      tags:
        - Manage Videos
      summary: Get Video
      description: Retrieves detailed metadata for the specified video, including status, dimensions, encoding progress, and more.
      operationId: Video_GetVideo
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video.
      responses:
        '200':
          description: Detailed video information including metadata and status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
    post:
      tags:
        - Manage Videos
      summary: Update Video
      description: Updates metadata and other details for the specified video. Provide updated fields in the request body using the UpdateVideoModel.
      operationId: Video_UpdateVideo
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video to update.
      requestBody:
        description: Video model containing the fields to update.
        content:
          application/json:
            schema:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/UpdateVideoModel'
        required: true
      responses:
        '200':
          description: The video was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
    delete:
      tags:
        - Manage Videos
      summary: Delete Video
      description: Deletes the specified video permanently from the video library.
      operationId: Video_DeleteVideo
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video to be deleted.
      responses:
        '200':
          description: The video was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
    put:
      tags:
        - Manage Videos
      summary: Upload Video
      description: Uploads a new video file to the specified video library. Additional query parameters allow customization of encoding options such as JIT encoding, enabled resolutions, and output codecs.
      operationId: Video_UploadVideo
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier to assign to the new video.
        - name: jitEnabled
          in: query
          description: Determines whether JIT encoding should be enabled for this video. Works only when Premium Encoding is enabled; overrides library settings.
          schema:
            type: boolean
        - name: enabledResolutions
          in: query
          description: 'A comma-separated list of resolutions to enable for encoding. Options include: 240p, 360p, 480p, 720p, 1080p, 1440p, 2160p.'
          schema:
            type: string
            default: ''
            nullable: true
        - name: enabledOutputCodecs
          in: query
          description: 'Specifies the codecs that will be used to encode the video. Overrides library settings. Available values: x264, vp9.'
          schema:
            type: string
            default: ''
            nullable: true
      responses:
        '200':
          description: The video was successfully uploaded and is now being processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '400':
          description: The requested video was already uploaded.
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/heatmap:
    get:
      tags:
        - Manage Videos
      summary: Get Video Heatmap
      description: Retrieves the heatmap data for the specified video, indicating the percentage of watch time across the video's duration.
      operationId: Video_GetVideoHeatmap
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video.
      responses:
        '200':
          description: The heatmap data for the video, where higher values indicate greater viewer engagement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoHeatmapModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/play:
    get:
      tags:
        - Manage Videos
      summary: Get Video Play Data
      description: Retrieves playback data for the specified video including video URLs, captions path, authentication tokens, and player settings.
      operationId: Video_GetVideoPlayData
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video.
        - name: token
          in: query
          schema:
            type: string
            default: ''
            nullable: true
          description: Authentication token for accessing the video playback data.
        - name: expires
          in: query
          schema:
            type: integer
            format: int64
            default: 0
          description: Expiration timestamp for the provided token.
      responses:
        '200':
          description: The playback data for the video, including URLs and player settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoPlayDataModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
  /library/{libraryId}/statistics:
    get:
      tags:
        - Manage Videos
      summary: Get Video Statistics
      description: Retrieves statistical data for videos in the specified library. Supports filtering by date range, hourly grouping, and filtering by video GUID.
      operationId: Video_GetVideoStatistics
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: dateFrom
          in: query
          description: Optional start date (ISO 8601 format) for the statistics. Defaults to the last 30 days if not provided.
          schema:
            type: string
            format: date-time
            nullable: true
        - name: dateTo
          in: query
          description: Optional end date (ISO 8601 format) for the statistics. Defaults to the last 30 days if not provided.
          schema:
            type: string
            format: date-time
            nullable: true
        - name: hourly
          in: query
          description: If true, returns statistics data grouped by hour.
          schema:
            type: boolean
            default: false
        - name: videoGuid
          in: query
          description: Optional GUID of a specific video to retrieve statistics for.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: The statistical data for the specified videos or video.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoStatisticsModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/reencode:
    post:
      tags:
        - Manage Videos
      summary: Reencode Video
      description: Initiates a re-encoding process for the specified video. This operation can be used to adjust encoding settings or to fix issues with the original encoding.
      operationId: Video_ReencodeVideo
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video to reencode.
      responses:
        '200':
          description: The video reencoding process was initiated successfully and updated video details are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoModel'
        '400':
          description: The original video file is missing.
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/outputs/{outputCodecId}:
    put:
      tags:
        - Manage Videos
      summary: Add output codec to video
      description: Adds a specified output codec to the video. This enables additional encoding options for the video file.
      operationId: Video_ReencodeUsingCodec
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
            format: guid
          description: The unique identifier of the video.
        - name: outputCodecId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/EncoderOutputCodec'
          description: The output codec to add (e.g., x264, vp9, hevc, av1).
      responses:
        '200':
          description: The output codec was successfully added and the updated video details are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoModel'
        '400':
          description: Invalid request or validation failed. Check the response for details.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/repackage:
    post:
      tags:
        - Manage Videos
      summary: Repackage Video
      description: Repackages the video, with an option to retain original files for faster future operations. This process may adjust resolution outputs and file formats.
      operationId: Video_Repackage
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video to repackage.
        - name: keepOriginalFiles
          in: query
          description: If true, previous file versions are kept in storage, allowing for faster future repackaging. Default is true.
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: The video was successfully repackaged and updated details are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoModel'
        '400':
          description: Enterprise DRM is disabled for the library; repackaging is not available.
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos:
    get:
      tags:
        - Manage Videos
      summary: List Videos
      description: Retrieves a paginated list of videos from the specified video library. Supports filtering by search term, collection, and ordering by date.
      operationId: Video_List
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: page
          in: query
          schema:
            type: integer
            format: int32
            default: 1
          description: The page number to retrieve.
        - name: itemsPerPage
          in: query
          schema:
            type: integer
            format: int32
            default: 100
          description: The number of videos per page.
        - name: search
          in: query
          schema:
            type: string
            default: ''
            nullable: true
          description: A search term to filter videos by title or metadata.
        - name: collection
          in: query
          schema:
            type: string
            default: ''
            nullable: true
          description: The ID of the collection to filter videos by.
        - name: orderBy
          in: query
          schema:
            type: string
            default: date
            nullable: true
          description: Specifies the field by which to order the video list.
      responses:
        '200':
          description: A paginated list of videos matching the query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationListOfVideoModel'
        '401':
          description: The request authorization failed.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
    post:
      tags:
        - Manage Videos
      summary: Create Video
      description: Creates a new video entry in the specified library. Provide the video details, such as title and optional thumbnail extraction time, in the request body.
      operationId: Video_CreateVideo
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library where the video will be created.
      requestBody:
        description: Video model containing details for the new video. Title is required.
        content:
          application/json:
            schema:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/CreateVideoModel'
        required: true
      responses:
        '200':
          description: The video was successfully created and the full video details are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoModel'
        '401':
          description: The request authorization failed.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/thumbnail:
    post:
      tags:
        - Manage Videos
      summary: Set Thumbnail
      description: Sets or updates the thumbnail image for the specified video using the provided thumbnail URL.
      operationId: Video_SetThumbnail
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video.
        - name: thumbnailUrl
          in: query
          schema:
            type: string
            nullable: true
          description: The URL of the thumbnail image to set for the video.
      responses:
        '200':
          description: The thumbnail was successfully set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/fetch:
    post:
      tags:
        - Manage Videos
      summary: Fetch Video
      description: Fetches a video from a remote URL and adds it to the specified library. Optional parameters allow you to specify a collection and the time (in ms) to extract a thumbnail.
      operationId: Video_FetchNewVideo
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: collectionId
          in: query
          schema:
            type: string
            nullable: true
          description: Optional collection ID to assign the fetched video to.
        - name: thumbnailTime
          in: query
          description: Optional video time in milliseconds to extract the main video thumbnail.
          schema:
            type: integer
            format: int32
            nullable: true
      requestBody:
        description: Fetch video request model containing the URL and optional headers for the fetch operation.
        content:
          application/json:
            schema:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/FetchVideoRequest'
        required: true
      responses:
        '200':
          description: The video was successfully fetched and added to the library.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '400':
          description: Failed fetching the video.
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/captions/{srclang}:
    post:
      tags:
        - Manage Videos
      summary: Add Caption
      description: Adds caption data to the specified video for the given language. The caption file should be provided as a base64 encoded string.
      operationId: Video_AddCaption
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video.
        - name: srclang
          in: path
          required: true
          schema:
            type: string
          description: The ISO 639-1 language code for the caption (e.g., 'en', 'fr').
      requestBody:
        description: Caption model including language, label, and base64 encoded captions file.
        content:
          application/json:
            schema:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/CaptionModelAdd'
        required: true
      responses:
        '200':
          description: The caption was successfully uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '400':
          description: Failed uploading the captions.
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
    delete:
      tags:
        - Manage Videos
      summary: Delete Caption
      description: Deletes the caption for the specified language from the video.
      operationId: Video_DeleteCaption
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video.
        - name: srclang
          in: path
          required: true
          schema:
            type: string
          description: The ISO 639-1 language code of the caption to be deleted.
      responses:
        '200':
          description: The caption was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '400':
          description: Failed deleting the captions.
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/transcribe:
    post:
      tags:
        - Manage Videos
      summary: Transcribe Video
      description: Initiates the transcription process for the specified video. You can optionally override the video library transcription settings using the provided request body.
      operationId: Video_TranscribeVideo
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video to transcribe.
        - name: language
          in: query
          description: The ISO 639-1 language code of the video source. This parameter is used only if not overridden by the request body.
          schema:
            type: string
            nullable: true
        - name: force
          in: query
          description: If true, forces the transcription process even if the video has been transcribed before.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Optional transcription settings that override the default video library settings.
        content:
          application/json:
            schema:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/TranscribeSettings'
      responses:
        '200':
          description: The transcription process was successfully queued.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '400':
          description: Invalid request for transcription queue.
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/resolutions:
    get:
      tags:
        - Manage Videos
      summary: Video Resolutions Info
      description: Retrieves information about the available and configured resolutions for the specified video. This includes data on storage resolutions and MP4 fallback files if available.
      operationId: Video_GetVideoResolutions
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video.
      responses:
        '200':
          description: Resolution information for the video, including available and configured resolutions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModelOfVideoResolutionsInfoModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /library/{libraryId}/videos/{videoId}/resolutions/cleanup:
    post:
      tags:
        - Manage Videos
      summary: Cleanup Unconfigured Resolutions
      description: Cleans up unconfigured resolutions for the specified video. Query parameters allow you to specify which resolutions to delete and whether to perform a dry run without actual file deletion.
      operationId: Video_DeleteResolutions
      parameters:
        - name: libraryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the video library.
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the video.
        - name: resolutionsToDelete
          in: query
          schema:
            type: string
            nullable: true
          description: Comma separated list of resolutions to delete.
        - name: deleteNonConfiguredResolutions
          in: query
          schema:
            type: boolean
            default: false
          description: If true, deletes resolutions that are not configured.
        - name: deleteOriginal
          in: query
          schema:
            type: boolean
            default: false
          description: If true, deletes the original video file.
        - name: deleteMp4Files
          in: query
          schema:
            type: boolean
            default: false
          description: If true, deletes MP4 fallback files.
        - name: dryRun
          in: query
          description: If set to true, no files will be actually deleted; only informational data is returned.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: The specified resolutions were successfully deleted (or would be deleted in a dry run).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '401':
          description: The request authorization failed.
        '404':
          description: The requested video was not found.
        '500':
          description: Internal Server Error.
      security:
        - AccessKey: []
  /OEmbed:
    get:
      tags:
        - OEmbed
      summary: Get OEmbed Data
      description: Retrieves OEmbed information for a given video URL. This includes embed HTML, thumbnail URL, and metadata such as title and provider details.
      operationId: OEmbed_GetOEmbed
      parameters:
        - name: url
          in: query
          schema:
            type: string
            nullable: true
          description: The URL for which to retrieve OEmbed information.
        - name: maxWidth
          in: query
          schema:
            type: integer
            format: int32
            nullable: true
          description: Optional maximum width of the embed.
        - name: maxHeight
          in: query
          schema:
            type: integer
            format: int32
            nullable: true
          description: Optional maximum height of the embed.
        - name: token
          in: query
          schema:
            type: string
            default: ''
            nullable: true
          description: Authentication token if required.
        - name: expires
          in: query
          schema:
            type: integer
            format: int64
            default: 0
          description: Expiration timestamp for the provided token.
      responses:
        '200':
          description: OEmbed data for the provided URL, including embed HTML and metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoOEmbedModel'
components:
  schemas:
    CollectionModel:
      type: object
      description: Represents a video collection in the library. Contains metadata such as the unique identifier, name, video count, total storage size, and preview information.
      additionalProperties: false
      properties:
        videoLibraryId:
          type: integer
          description: The ID of the video library that contains the collection.
          format: int64
        guid:
          type: string
          description: The unique identifier of the collection.
          nullable: true
        name:
          type: string
          description: The name of the collection.
          nullable: true
        videoCount:
          type: integer
          description: The number of videos in the collection.
          format: int64
        totalSize:
          type: integer
          description: The total storage size of the collection in bytes.
          format: int64
        previewVideoIds:
          type: string
          description: Comma-separated list of video IDs used as preview icons.
          nullable: true
        previewImageUrls:
          type: array
          description: An array of URLs for preview images of the videos in the collection.
          nullable: true
          items:
            type: string
    PaginationListOfCollectionModel:
      type: object
      description: A paginated list of collections.
      additionalProperties: false
      properties:
        totalItems:
          type: integer
          description: The total number of collections available.
          format: int64
        currentPage:
          type: integer
          description: The current page number.
          format: int64
        itemsPerPage:
          type: integer
          description: The number of collections per page.
          format: int32
        items:
          type: array
          description: The collections returned on the current page.
          nullable: true
          items:
            $ref: '#/components/schemas/CollectionModel'
    UpdateCollectionModel:
      type: object
      description: Schema for updating collection details.
      additionalProperties: false
      properties:
        name:
          type: string
          description: The updated name of the collection.
          nullable: true
    StatusModel:
      type: object
      description: Generic status response model indicating the success or failure of an operation.
      additionalProperties: false
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful.
        message:
          type: string
          description: A descriptive message regarding the operation outcome.
          nullable: true
        statusCode:
          type: integer
          description: The HTTP status code for the response.
          format: int32
    VideoModel:
      type: object
      description: Represents a video and its metadata including title, upload date, dimensions, encoding status, and more.
      additionalProperties: false
      properties:
        videoLibraryId:
          type: integer
          description: The ID of the video library that the video belongs to.
          format: int64
        guid:
          type: string
          description: The unique identifier of the video.
          nullable: true
        title:
          type: string
          description: The title of the video.
          nullable: true
        dateUploaded:
          type: string
          description: The date and time when the video was uploaded.
          format: date-time
        views:
          type: integer
          description: The number of views the video has received.
          format: int64
        isPublic:
          type: boolean
          description: Determines if the video is publicly accessible.
        length:
          type: integer
          description: The duration of the video in seconds.
          format: int32
        status:
          description: The current status of the video (e.g., processing, finished, error).
          oneOf:
            - $ref: '#/components/schemas/VideoModelStatus'
        framerate:
          type: number
          description: The framerate of the video.
          format: double
        rotation:
          type: integer
          description: The rotation (in degrees) of the video if applicable.
          nullable: true
        width:
          type: integer
          description: The width of the original video in pixels.
          format: int32
        height:
          type: integer
          description: The height of the original video in pixels.
          format: int32
        availableResolutions:
          type: string
          description: A comma-separated list of resolutions available for the video.
          nullable: true
        outputCodecs:
          type: string
          description: A comma-separated list of output codecs used for video encoding.
          nullable: true
        thumbnailCount:
          type: integer
          description: The number of thumbnails generated for the video.
          format: int32
        encodeProgress:
          type: integer
          description: The current encoding progress of the video as a percentage.
          format: int32
        storageSize:
          type: integer
          description: The total storage size of the video file in bytes.
          format: int64
        captions:
          type: array
          description: A list of captions available for the video.
          nullable: true
          items:
            $ref: '#/components/schemas/CaptionModel'
        hasMP4Fallback:
          type: boolean
          description: Indicates if MP4 fallback files are available for the video.
        collectionId:
          type: string
          description: The identifier of the collection that the video belongs to.
          nullable: true
        thumbnailFileName:
          type: string
          description: The file name of the thumbnail stored on the server.
          nullable: true
        averageWatchTime:
          type: integer
          description: The average watch time of the video in seconds.
          format: int64
        totalWatchTime:
          type: integer
          description: The total accumulated watch time of the video in seconds.
          format: int64
        category:
          type: string
          description: The automatically detected category of the video.
          nullable: true
        chapters:
          type: array
          description: A list of chapters within the video.
          nullable: true
          items:
            $ref: '#/components/schemas/ChapterModel'
        moments:
          type: array
          description: A list of significant moments or events in the video.
          nullable: true
          items:
            $ref: '#/components/schemas/MomentModel'
        metaTags:
          type: array
          description: A list of metadata tags associated with the video.
          nullable: true
          items:
            $ref: '#/components/schemas/MetaTagModel'
        transcodingMessages:
          type: array
          description: Messages generated during transcoding that indicate warnings or errors.
          nullable: true
          items:
            $ref: '#/components/schemas/TranscodingMessageModel'
    VideoModelStatus:
      type: integer
      description: 'Status of the video: 0 = Created, 1 = Uploaded, 2 = Processing, 3 = Transcoding, 4 = Finished, 5 = Error, 6 = UploadFailed, 7 = JitSegmenting, 8 = JitPlaylistsCreated'
      x-enumNames:
        - Created
        - Uploaded
        - Processing
        - Transcoding
        - Finished
        - Error
        - UploadFailed
        - JitSegmenting
        - JitPlaylistsCreated
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
    CaptionModel:
      type: object
      description: Represents caption details for a video.
      additionalProperties: false
      properties:
        srclang:
          type: string
          description: The ISO 639-1 language code for the caption.
          nullable: true
        label:
          type: string
          description: A descriptive label for the caption.
          nullable: true
    ChapterModel:
      type: object
      description: Represents a chapter within a video, including its title and start/end times.
      additionalProperties: false
      required:
        - title
      properties:
        title:
          type: string
          description: The title of the chapter.
          minLength: 1
        start:
          type: integer
          description: The start time of the chapter in seconds.
          format: int32
        end:
          type: integer
          description: The end time of the chapter in seconds.
          format: int32
    MomentModel:
      type: object
      description: Represents a key moment in the video with a descriptive label and timestamp.
      additionalProperties: false
      required:
        - label
      properties:
        label:
          type: string
          description: A descriptive label for the moment.
          minLength: 1
        timestamp:
          type: integer
          description: The timestamp of the moment in seconds.
          format: int32
    MetaTagModel:
      type: object
      description: Represents a metadata tag for a video.
      additionalProperties: false
      properties:
        property:
          type: string
          description: The property name of the meta tag.
          nullable: true
        value:
          type: string
          description: The value associated with the meta tag property.
          nullable: true
    TranscodingMessageModel:
      type: object
      description: Represents a message from the transcoding process indicating warnings or errors.
      additionalProperties: false
      properties:
        timeStamp:
          type: string
          description: The timestamp when the message was generated.
          format: date-time
        level:
          $ref: '#/components/schemas/Severity'
        issueCode:
          $ref: '#/components/schemas/IssueCodes'
        message:
          type: string
          description: A descriptive message detailing the transcoding issue.
          nullable: true
        value:
          type: string
          description: An optional value providing further context for the issue.
          nullable: true
    Severity:
      type: integer
      description: 'The severity level of a transcoding message: 0 = Undefined, 1 = Information, 2 = Warning, 3 = Error.'
      x-enumNames:
        - Undefined
        - Information
        - Warning
        - Error
      enum:
        - 0
        - 1
        - 2
        - 3
    IssueCodes:
      type: integer
      description: 'The issue code representing a specific transcoding problem. Codes: 0 = Undefined, 1 = StreamLengthsDifference, 2 = TranscodingWarnings, 3 = IncompatibleResolution, 4 = InvalidFramerate, 5 = VideoExceededMaxDuration, 6 = AudioExceededMaxDuration, 7 = OriginalCorrupted, 8 = TranscriptionFailed, 9 = JitIncompatible, 10 = JitFailed.'
      x-enumNames:
        - Undefined
        - StreamLengthsDifference
        - TranscodingWarnings
        - IncompatibleResolution
        - InvalidFramerate
        - VideoExceededMaxDuration
        - AudioExceededMaxDuration
        - OriginalCorrupted
        - TranscriptionFailed
        - JitIncompatible
        - JitFailed
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
    VideoHeatmapModel:
      type: object
      description: Represents the heatmap data for a video. Each key represents a time segment and its corresponding watch percentage.
      additionalProperties: false
      properties:
        heatmap:
          type: object
          description: The heatmap where keys are time segments and values are watch percentages.
          nullable: true
          additionalProperties:
            type: integer
            format: int32
    VideoPlayDataModel:
      type: object
      description: Contains all necessary playback information for a video, including various URLs and player configurations.
      additionalProperties: false
      properties:
        video:
          description: The video data model.
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/VideoModel'
        captionsPath:
          type: string
          description: The path where caption files are stored.
          nullable: true
        seekPath:
          type: string
          description: The URL to be used for seeking within the video.
          nullable: true
        thumbnailUrl:
          type: string
          description: The URL of the video's thumbnail.
          nullable: true
        fallbackUrl:
          type: string
          description: The fallback URL for the video.
          nullable: true
        videoPlaylistUrl:
          type: string
          description: The URL of the video playlist.
          nullable: true
        originalUrl:
          type: string
          description: The URL of the original video file.
          nullable: true
        previewUrl:
          type: string
          description: The URL of the video preview.
          nullable: true
        controls:
          type: string
          description: Player control settings.
          nullable: true
        enableDRM:
          type: boolean
          description: Indicates if DRM is enabled for the video.
        drmVersion:
          type: integer
          description: The version number of DRM used.
          format: int32
        playerKeyColor:
          type: string
          description: The primary color used for the video player interface.
          nullable: true
        vastTagUrl:
          type: string
          description: The VAST tag URL for video ads.
          nullable: true
        captionsFontSize:
          type: integer
          description: Font size for captions in the video player.
          format: int32
        captionsFontColor:
          type: string
          description: Font color for captions in the video player.
          nullable: true
        captionsBackground:
          type: string
          description: Background color for captions.
          nullable: true
        uiLanguage:
          type: string
          description: The language used for the player UI.
          nullable: true
        allowEarlyPlay:
          type: boolean
          description: Indicates if early playback is allowed.
        tokenAuthEnabled:
          type: boolean
          description: Indicates if token-based authentication is enabled for playback.
        enableMP4Fallback:
          type: boolean
          description: Indicates if MP4 fallback files should be used.
        showHeatmap:
          type: boolean
          description: Indicates if the heatmap should be displayed on the player.
        fontFamily:
          type: string
          description: The font family used for captions.
          nullable: true
        playbackSpeeds:
          type: string
          description: Available playback speed options for the video.
          nullable: true
    VideoStatisticsModel:
      type: object
      description: Represents various statistics for a video including view counts, watch time, and engagement score.
      additionalProperties: false
      properties:
        viewsChart:
          type: object
          description: A chart representing view counts over time.
          nullable: true
          additionalProperties:
            type: integer
            format: int64
        watchTimeChart:
          type: object
          description: A chart representing total watch time over time.
          nullable: true
          additionalProperties:
            type: integer
            format: int64
        countryViewCounts:
          type: object
          description: View counts grouped by country.
          nullable: true
          additionalProperties:
            type: integer
            format: int64
        countryWatchTime:
          type: object
          description: Total watch time grouped by country.
          nullable: true
          additionalProperties:
            type: integer
            format: int64
        engagementScore:
          type: integer
          description: A score representing viewer engagement.
          format: int32
    EncoderOutputCodec:
      type: integer
      description: 'Output codec used for encoding the video: 0 = x264, 1 = vp9, 2 = hevc, 3 = av1.'
      x-enumNames:
        - x264
        - vp9
        - hevc
        - av1
      enum:
        - 0
        - 1
        - 2
        - 3
    PaginationListOfVideoModel:
      type: object
      description: A paginated list of videos.
      additionalProperties: false
      properties:
        totalItems:
          type: integer
          description: The total number of videos available.
          format: int64
        currentPage:
          type: integer
          description: The current page number.
          format: int64
        itemsPerPage:
          type: integer
          description: The number of videos per page.
          format: int32
        items:
          type: array
          description: The videos returned on the current page.
          nullable: true
          items:
            $ref: '#/components/schemas/VideoModel'
    CreateVideoModel:
      type: object
      description: Schema for creating a new video entry. 'title' is required.
      additionalProperties: false
      required:
        - title
      properties:
        title:
          type: string
          description: The title of the new video.
          minLength: 1
        collectionId:
          type: string
          description: Optional collection ID where the video will be placed.
          nullable: true
        thumbnailTime:
          type: integer
          description: Video time in milliseconds used to extract the main video thumbnail.
          format: int32
          nullable: true
    UpdateVideoModel:
      type: object
      description: Schema for updating video metadata.
      additionalProperties: false
      properties:
        title:
          type: string
          description: The updated title of the video.
          nullable: true
        collectionId:
          type: string
          description: The ID of the collection to which the video belongs.
          nullable: true
        chapters:
          type: array
          description: A list of chapters for the video.
          nullable: true
          items:
            $ref: '#/components/schemas/ChapterModel'
        moments:
          type: array
          description: A list of key moments in the video.
          nullable: true
          items:
            $ref: '#/components/schemas/MomentModel'
        metaTags:
          type: array
          description: A list of meta tags to associate with the video.
          nullable: true
          items:
            $ref: '#/components/schemas/MetaTagModel'
    FetchVideoRequest:
      type: object
      description: Schema for fetching a video from a remote URL. The 'url' field is required.
      additionalProperties: false
      required:
        - url
      properties:
        url:
          type: string
          description: The URL from which to fetch the video.
          minLength: 1
        headers:
          type: object
          description: Optional headers to include with the fetch request.
          nullable: true
          additionalProperties:
            type: string
        title:
          type: string
          description: Optional title to assign to the fetched video.
          nullable: true
    CaptionModelAdd:
      type: object
      description: Schema for adding a caption. Includes language code, descriptive label, and a base64 encoded captions file.
      additionalProperties: false
      properties:
        srclang:
          type: string
          description: The ISO 639-1 language code for the caption.
          nullable: true
        label:
          type: string
          description: A descriptive label for the caption.
          nullable: true
        captionsFile:
          type: string
          description: The base64 encoded captions file content.
          nullable: true
    TranscribeSettings:
      type: object
      description: Settings for video transcription that allow overriding default transcription options.
      additionalProperties: false
      properties:
        targetLanguages:
          type: array
          description: List of target language codes (ISO 639-1) for transcription.
          nullable: true
          items:
            type: string
        generateTitle:
          type: boolean
          description: Determines if the video title should be automatically generated.
          default: false
        generateDescription:
          type: boolean
          description: Determines if the video description should be automatically generated.
          default: false
        sourceLanguage:
          type: string
          description: The source language code (ISO 639-1) of the video. This takes precedence over the query parameter if provided.
          nullable: true
    StatusModelOfVideoResolutionsInfoModel:
      allOf:
        - $ref: '#/components/schemas/StatusModel'
        - type: object
          description: Wraps the VideoResolutionsInfoModel with a status response.
          additionalProperties: false
          properties:
            data:
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/VideoResolutionsInfoModel'
    VideoResolutionsInfoModel:
      type: object
      description: Represents detailed resolution information for a video, including available, configured, and storage resolutions.
      additionalProperties: false
      properties:
        videoId:
          type: string
          description: The unique identifier of the video.
          nullable: true
        videoLibraryId:
          type: integer
          description: The ID of the video library.
          format: int64
        availableResolutions:
          type: array
          description: A list of available resolutions for the video.
          nullable: true
          items:
            type: string
        configuredResolutions:
          type: array
          description: A list of resolutions configured for encoding.
          nullable: true
          items:
            type: string
        playlistResolutions:
          type: array
          description: A list of resolutions used in playlists.
          nullable: true
          items:
            $ref: '#/components/schemas/ResolutionReference'
        storageResolutions:
          type: array
          description: A list of resolutions stored on the server.
          nullable: true
          items:
            $ref: '#/components/schemas/ResolutionReference'
        mp4Resolutions:
          type: array
          description: A list of MP4 fallback resolutions.
          nullable: true
          items:
            $ref: '#/components/schemas/ResolutionReference'
        storageObjects:
          type: array
          description: A list of storage objects related to the video resolutions.
          nullable: true
          items:
            $ref: '#/components/schemas/StorageObjectModel'
        oldResolutions:
          type: array
          description: A list of previous resolution objects that may be removed.
          nullable: true
          items:
            $ref: '#/components/schemas/StorageObjectModel'
        hasBothOldAndNewResolutionFormat:
          type: boolean
          description: Indicates if both old and new resolution formats are present.
        hasOriginal:
          type: boolean
          description: Indicates if the original video file is available.
    ResolutionReference:
      type: object
      description: Reference to a specific video resolution including its file path.
      additionalProperties: false
      properties:
        resolution:
          type: string
          description: The resolution (e.g., 720p, 1080p).
          nullable: true
        path:
          type: string
          description: The file path associated with this resolution.
          nullable: true
    StorageObjectModel:
      type: object
      description: Represents a storage object containing file details for a video.
      additionalProperties: false
      properties:
        guid:
          type: string
          description: The unique identifier of the storage object.
          nullable: true
        storageZoneName:
          type: string
          description: The name of the storage zone where the file is kept.
          nullable: true
        path:
          type: string
          description: The file path of the storage object.
          nullable: true
        objectName:
          type: string
          description: The name of the object in storage.
          nullable: true
        length:
          type: integer
          description: The length of the file in bytes.
          format: int64
        lastChanged:
          type: string
          description: The date and time when the file was last modified.
          format: date-time
        serverId:
          type: integer
          description: The identifier of the server storing the file.
          format: int32
        isDirectory:
          type: boolean
          description: Indicates if the storage object is a directory.
        userId:
          type: string
          description: The user ID associated with the storage object.
          nullable: true
        contentType:
          type: string
          description: The MIME type of the file.
          nullable: true
        dateCreated:
          type: string
          description: The date and time when the file was created.
          format: date-time
        storageZoneId:
          type: integer
          description: The identifier of the storage zone.
          format: int64
        checksum:
          type: string
          description: A checksum value for file integrity verification.
          nullable: true
        replicatedZones:
          type: string
          description: A list of storage zones where the file is replicated.
          nullable: true
    VideoOEmbedModel:
      type: object
      description: Represents OEmbed data for a video, including embed HTML and metadata such as title and provider information.
      additionalProperties: false
      properties:
        version:
          type: string
          description: The version of the OEmbed specification being used.
          nullable: true
        title:
          type: string
          description: The title of the video.
          nullable: true
        type:
          type: string
          description: The type of the embedded object (e.g., video).
          nullable: true
        thumbnailUrl:
          type: string
          description: The URL of the video thumbnail.
          nullable: true
        width:
          type: integer
          description: The width of the embedded video.
          format: int32
        height:
          type: integer
          description: The height of the embedded video.
          format: int32
        html:
          type: string
          description: The HTML snippet for embedding the video.
          nullable: true
        providerName:
          type: string
          description: The name of the provider (e.g., bunny.net).
          nullable: true
        providerUrl:
          type: string
          description: The URL of the provider's website.
          nullable: true
  securitySchemes:
    AccessKey:
      type: apiKey
      description: AccessKey based authentication. Pass your AccessKey in the header to authorize requests.
      name: AccessKey
      in: header
tags:
  - name: Manage Collections
    description: Endpoints for managing video collections including creation, retrieval, updating, and deletion.
  - name: Manage Videos
    description: Endpoints for managing videos including upload, update, deletion, fetching metadata, transcoding, and caption management.
  - name: OEmbed
    description: Endpoint for retrieving OEmbed data for embedding videos.
x-readme:
  explorer-enabled: true
  proxy-enabled: true
